#!/usr/bin/env node
'use strict';

// loads all of the files in our lib folder and neatly packs them in our app object
var path = require("path");
var loader = require('auto-loader');

var controllers = loader.load( path.dirname(__dirname) + '/lib/controllers');
var assets = loader.load( path.dirname(__dirname) + '/lib/assets');
// var models = loader.load( path.dirname(__dirname) + '/lib/models');

var columnify = require('columnify');

// this will set up the checklog first
controllers.setup.install();

var arg = assets._args;

// set everything to debug mode
if(arg.hasArg('debug') && arg.getArg('debug') === true){
    for(var key in app ){
        app[key].debug = true;
    };   
}

var action = arg.getAction();

/* accepted actions */
var accepts = ['start', 'stop', 'help', 'distract', 'create', 'list', 'update', 'assign'];

/* create mode */
if( action == 'create' ){
    controllers.creator._.create();
} else if( action == 'list' ){
    controllers.lister._.list();
}else if ( action == 'start' ){

}else if ( action == 'stop' ){

}else if ( action == 'help' ){

}else if ( action == 'distract' ){

}else if ( action == 'update' ){

}else if ( action == 'assign' ){

}else{
    console.log("Sorry, no accept action passed");
}

process.exit();

// asignment mode
if( arg.hasArg('a') ){
    if(!arg.hasArg('t') || !arg.hasArg('p')){
        console.log(new Error('Assign task to Project requires both a task and project name or uid declaration'));
        process.exit(1);
    }

   var project = app.model.getUID(arg.getArg('p')),
       task = app.model.getUID(arg.getArg('t'));

    app.model.setProjectTask(project,task);
}

/* update mode */
if( arg.hasArg('u') ){
    if( (!arg.hasArg('t') && !arg.hasArg('p')) || (arg.hasArg('t') && arg.hasArg('p')) ){
        console.log(new Error('Must specify a project or a task that you want to update. Can\'t specify both.'));
        process.exit(1);
    }

    var type = arg.hasArg('t') ? 't' : 'p', 
        name = arg.getArg('t') || arg.getArg('p'), 
        data = {},
        description = arg.hasArg('d') ? arg.getArg('d') : null,
        billable = arg.hasArg('b') ? arg.getArg('b') : null;

    if(desciption !== null){
        data.desctiption = desctiption;
    }
    if(type == 't'){
        if(billable !== null){
            data.billable = billable;
        }
    }
}